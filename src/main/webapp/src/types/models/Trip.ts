/* tslint:disable */
/* eslint-disable */
/**
 * TravelSync API
 * ## TravelSync API Documentation This API provides endpoints for managing travel itineraries, including creating, updating, and retrieving travel plans. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: pniecke@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Expense } from './Expense';
import {
    ExpenseFromJSON,
    ExpenseFromJSONTyped,
    ExpenseToJSON,
} from './Expense';
import type { TripStatus } from './TripStatus';
import {
    TripStatusFromJSON,
    TripStatusFromJSONTyped,
    TripStatusToJSON,
} from './TripStatus';
import type { User } from './User';
import {
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
} from './User';

/**
 * 
 * @export
 * @interface Trip
 */
export interface Trip {
    /**
     * Unique identifier for the trip
     * @type {string}
     * @memberof Trip
     */
    id?: string;
    /**
     * Name of the trip
     * @type {string}
     * @memberof Trip
     */
    name: string;
    /**
     * 
     * @type {Array<User>}
     * @memberof Trip
     */
    participants?: Array<User>;
    /**
     * Destination of the trip
     * @type {string}
     * @memberof Trip
     */
    destination: string;
    /**
     * Start time of the trip
     * @type {string}
     * @memberof Trip
     */
    startTime: string;
    /**
     * End time of the trip
     * @type {string}
     * @memberof Trip
     */
    endTime?: string;
    /**
     * Description of the trip
     * @type {string}
     * @memberof Trip
     */
    description?: string;
    /**
     * 
     * @type {TripStatus}
     * @memberof Trip
     */
    status: TripStatus;
    /**
     * 
     * @type {Array<Expense>}
     * @memberof Trip
     */
    expenses?: Array<Expense>;
}

/**
 * Check if a given object implements the Trip interface.
 */
export function instanceOfTrip(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "destination" in value;
    isInstance = isInstance && "startTime" in value;
    isInstance = isInstance && "status" in value;

    return isInstance;
}

export function TripFromJSON(json: any): Trip {
    return TripFromJSONTyped(json, false);
}

export function TripFromJSONTyped(json: any, ignoreDiscriminator: boolean): Trip {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': json['name'],
        'participants': !exists(json, 'participants') ? undefined : ((json['participants'] as Array<any>).map(UserFromJSON)),
        'destination': json['destination'],
        'startTime': json['startTime'],
        'endTime': !exists(json, 'endTime') ? undefined : json['endTime'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'status': TripStatusFromJSON(json['status']),
        'expenses': !exists(json, 'expenses') ? undefined : ((json['expenses'] as Array<any>).map(ExpenseFromJSON)),
    };
}

export function TripToJSON(value?: Trip | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'participants': value.participants === undefined ? undefined : ((value.participants as Array<any>).map(UserToJSON)),
        'destination': value.destination,
        'startTime': value.startTime,
        'endTime': value.endTime,
        'description': value.description,
        'status': TripStatusToJSON(value.status),
        'expenses': value.expenses === undefined ? undefined : ((value.expenses as Array<any>).map(ExpenseToJSON)),
    };
}

